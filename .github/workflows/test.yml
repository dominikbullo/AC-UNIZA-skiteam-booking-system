name: Test pipelines

on:
  push:
  pull_request:

env:
  ENVIRONMENT: develop
  BACKEND_IMAGE_NAME: backend
  NGINX_IMAGE_NAME: nginx

jobs:
  docker:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - name: Build and push to local registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: localhost:5000/name/app:latest
      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/name/app:latest
  Share built image between jobs
  As each job is isolated in its own runner, you can’t use your built image between jobs, except if you’re using self-hosted runners. However, you can pass data between jobs in a workflow using the actions/upload-artifact and actions/download-artifact actions:


  name: ci

  on:
    push:
      branches:
        - "main"

  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
        - name: Build and export
          uses: docker/build-push-action@v3
          with:
            context: .
            tags: myimage:latest
            outputs: type=docker,dest=/tmp/myimage.tar
        - name: Upload artifact
          uses: actions/upload-artifact@v3
          with:
            name: myimage
            path: /tmp/myimage.tar

    use:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
        - name: Download artifact
          uses: actions/download-artifact@v3
          with:
            name: myimage
            path: /tmp
        - name: Load image
          run: |
            docker load --input /tmp/myimage.tar
            docker image ls -a
